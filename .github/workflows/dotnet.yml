name: 'dotNet'
on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
      - 'hotfix/*'
    paths:
      - 'src/**'
  pull_request:
    branches:
      - main
      - develop
      - 'feature/*'
      - 'hotfix/*'
    paths:
      - 'src/**'

  workflow_dispatch:
    inputs:
      create-release:
        description: 'Create release'
        required: true
        default: false

jobs:


  gitleaks:
    name: Run Gitleaks Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetches the complete commit history

      - name: Setup Gitleaks
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Run Gitleaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2.3.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Save Gitleaks Results
        if: ${{ always() }}  # Always execute even if previous steps fail
        run: |
          mv results.sarif gitleaks-results-$(date +"%Y%m%d-%H%M%S").sarif
          echo "✅ Gitleaks scan completed"

      - name: Check Gitleaks Results
        if: ${{ always() }}
        run: |
          if [ ! -s "results.sarif" ]; then
            echo "No leaks detected ✅"
          else
            echo "Vulnerabilities found ❌"
            cat results.sarif
          fi

#      - name: Upload Gitleaks Results
#        if: ${{ always() }}  # Always execute even if previous steps fail
#        uses: actions/upload-artifact@v2
#        with:
#          name: gitleaks-results
#          path: gitleaks-results-*.sarif  # Uploads all SARIF files matching the pattern




  
  trivy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
  
      - name: Download Trivy and JUnit Template
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.45.0/trivy_0.45.0_Linux-64bit.tar.gz
          tar zxvf trivy_0.45.0_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/
          wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/junit.tpl -O junit.tpl
  
      - name: Download Docker image
        run: docker pull szirmaibence98/testimage:0.1.0
  
      - name: Run Trivy Vulnerability Scan
        id: trivy-scan
        run: |
          trivy image --severity HIGH,CRITICAL --format sarif -o trivy-results.sarif szirmaibence98/testimage:0.1.0
          echo "✅ Trivy scan completed"
  
      - name: Save Trivy Scan Results
        uses: actions/upload-artifact@v2
        with:
          name: trivy-results
          path: trivy-results.sarif
  
      - name: Summarize Vulnerabilities
        run: |
          sudo apt-get install jq
          VULNERABILITIES=$(jq '.runs[0].results | map(.ruleId + ": " + .message.text) | .[]' trivy-results.sarif | sed 's/^/ - /')
          if [ -z "$VULNERABILITIES" ]; then
            echo "No vulnerabilities found." >> $GITHUB_STEP_SUMMARY
          else
            echo "Vulnerabilities found:" >> $GITHUB_STEP_SUMMARY
            echo "$VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
          fi













  
  snyk:
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
  
      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
        with:
          language: dotnet
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN
  
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true
  
      - name: Save Snyk Results
        if: ${{ always() }}
        run: |
          mv snyk-code.sarif snyk-results-$(date +"%Y%m%d-%H%M%S").sarif
          echo "✅ Snyk scan completed"
  
      - name: Upload Snyk Results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: snyk-results
          path: snyk-results-*.sarif






#      - name: Send Gitleaks Report to Slack
#        if: failure()  # Executes only if Gitleaks scan fails
#        uses: rtCamp/action-slack-notify@v3
#        with:
#          status: failure
#          text: |
#            Gitleaks scan detected potential leaks in the repository. Check the attached report for details.
#          attachments: gitleaks-results-*.sarif
#        env:
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  
  semgrep:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read    
    container:
      image: returntocorp/semgrep
    steps:
      # Install Semgrep
      - name: Install Semgrep
        run: |
          pip install semgrep
  
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
  
      # Run Semgrep with SARIF output
      - name: Run Semgrep with SARIF output
        run: |
          semgrep \
            --sarif --output report.sarif \
            --metrics=off \
            --config="p/default"
  
      # Save report as pipeline artifact
      - name: Save report as pipeline artifact
        uses: actions/upload-artifact@v4.3.1
        with:
          name: report.sarif
          path: report.sarif
  
      # Upload SARIF file to GitHub
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: report.sarif
        if: always()



            


  
  gitversion:
    name: 'Determine Version'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine_version.outputs.MajorMinorPatch }}      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0




          
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'     
          preferLatestVersion: true

      - name: Determine Version
        id: determine_version
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
 
      - name: Save version to file
        run: echo "${{ steps.determine_version.outputs.MajorMinorPatch }}" > /tmp/version.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: /tmp/version.txt      


  write_to_file:
    needs: gitversion
    runs-on: ubuntu-latest
    steps:
      - name: Download version file
        uses: actions/download-artifact@v2
        with:
          name: version
          path: /tmp

      - name: Echo version
        run: cat /tmp/version.txt
        
  release:
    needs: gitversion
    runs-on: ubuntu-latest
    steps:
      - name: Check if release should be created
        run: |
          if ${{ github.event.inputs.create-release }}; then
            echo "Creating release"
          else
            echo "Not creating release"
          fi

      - name: Example Step
        run: echo "SemVerV2 value is $GITHUB_ENV "
    
  build:
    name: 'Build'
    needs: gitversion
    uses: szirmaibence98/templates/.github/workflows/dotnet.yml@main
    with:
      dotnet-version: '8.0.x'
      working-directory: 'src' # Optional: specify if your solution file is not in the root directory

  docker:
    needs: build
    uses: szirmaibence98/templates/.github/workflows/docker.yml@main
    with:
      image-name: szirmaibence98/testimage
      docker-context: '.'
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
