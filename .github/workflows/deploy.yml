name: 'Deploy'
on:
  push:
    branches:
      - main
      - 'feature/*'
      - 'hotfix/*'
    paths:
      - 'src/**'
    tags:
      - '*'

  pull_request:
    branches:
      - main
      - 'feature/*'
      - 'hotfix/*'
    paths:
      - 'src/**'
      
  workflow_dispatch:
    inputs:
#      release:
#        description: 'Create Release'
#        required: false
#        default: 'false'
      feature:
        description: 'Deploy Feature'
        required: false
        default: 'false'

jobs:

    
  gitversion:
    name: 'GitVersion'
    uses: szirmaibence98/templates/.github/workflows/gitversion.yml@main

#  snyk:
#    name: 'Snyk'
#    needs: gitversion
#    uses: szirmaibence98/templates/.github/workflows/snyk.yml@main
#    secrets:
#      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#    with:
#      release: ${{ github.event.inputs.release == 'true' }}
      
#  semgrep:
#    name: 'Semgrep'
#    needs: gitversion
#    uses: szirmaibence98/templates/.github/workflows/semgrep.yml@main
#    with:
#      release: ${{ github.event.inputs.release == 'true' }}
    
  build:
    name: 'Build'
    needs:  
     - gitversion
    uses: szirmaibence98/templates/.github/workflows/dotnet.yml@main
    with:
      dotnet-version: '8.0.x'
      working-directory: 'src'
      release: ${{ github.event.inputs.release == 'true' }}
      
  docker:
    needs: 
     - build
#     - snyk
#     - semgrep
    uses: szirmaibence98/templates/.github/workflows/docker.yml@main
    with:
      image-name: szirmaibence98/testimage
      docker-context: '.'
      release: ${{ github.event.inputs.release == 'true' }}
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

#  trivy:
#    name: 'Trivy'
#    needs: docker
#    uses: szirmaibence98/templates/.github/workflows/trivy.yml@main
#    if: ${{ github.ref == 'refs/heads/main' || (startsWith(github.ref, 'refs/heads/feature/') && github.event.inputs.feature == 'true') }}



#  opa:
#    name: 'Open Policy Agent'
#    needs: docker
#    if: ${{ github.ref == 'refs/heads/main' || (startsWith(github.ref, 'refs/heads/feature/') && github.event.inputs.feature == 'true') }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4.1.1
      
#      - name: Install OPA
#        run: |
#          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static
#          chmod +x opa
#          sudo mv opa /usr/local/bin/
#      - name: Run OPA Policy Check
#        run: opa eval --format pretty --data policy.rego --input input.json "data.dockerfile.allow"




  helm:
    needs: docker
    uses: szirmaibence98/templates/.github/workflows/helm.yml@main
    with:
      release: ${{ github.event.inputs.release == 'true' }}
    secrets:
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}


  deploy-dev:
    needs: helm
    uses: szirmaibence98/templates/.github/workflows/deploy.yml@main
    with:
      environment: dev
      deploy_condition: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || (startsWith(github.ref, 'refs/heads/feature/') && github.event.inputs.feature == 'true') }}

  deploy-staging:
    needs: helm
    uses: szirmaibence98/templates/.github/workflows/deploy.yml@main
    with:
      environment: staging
      deploy_condition: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
      
  deploy-prod:
    needs: helm
    uses: szirmaibence98/templates/.github/workflows/deploy.yml@main
    with:
      environment: prod
      deploy_condition: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/hotfix/') }}
      




  
  
  create-tag-after-prod:
    name: 'Create Tag After Prod'
    needs: deploy-prod
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
      
      - name: Download version file
        uses: actions/download-artifact@v4.1.4
        with:
          name: version
          path: /tmp
      
      - name: Read version from file
        id: read_version
        run: echo "VERSION=$(cat /tmp/version.txt)" >> $GITHUB_ENV
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Create and push tag based on GitVersion
        run: |
          VERSION=${{ env.VERSION }}
          git tag $VERSION
          git push origin $VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: $TAG_NAME
          release_name: Release $TAG_NAME
          draft: false
          prerelease: false
  
      # Optionally, upload release assets
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./path/to/your/asset.zip
          asset_name: asset.zip
          asset_content_type: application/zip
